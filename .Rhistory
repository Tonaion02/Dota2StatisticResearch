text(bp,
y = frequenze_relative_globali + 0.04,
labels = round(frequenze_relative_globali, 3),
col = "black",
cex = 1)
print(frequenze_relative_globali)
frequenze_relative_globali_strength = frequenze_relative_globali
frequenze_relative_globali_strength
# filtro i valori per attribute_intelligence_1 quando win == 1
filtered_intelligence_1 <- data$attribute_intelligence_1[data$win == 1]
# filtro i valori per attribute_intelligence_2 quando win == -1
filtered_intelligence_2 <- data$attribute_intelligence_2[data$win == -1]
# unione dei valori filtrati in un unico vettore
combined_values_intelligence <- c(filtered_intelligence_1, filtered_intelligence_2)
# calcolo delle frequenze assolute totali per intelligence
frequenze_totali_intelligence <- table(combined_values_intelligence)
frequenze_totali_intelligence
# calcolo delle frequenze relative globali per ogni valore di "intelligence"
frequenze_relative_globali_intelligence <- c(
intelligence_0 = sum(combined_values_intelligence == 0) / sum(data$attribute_intelligence_1 == 0 | data$attribute_intelligence_2 == 0),
intelligence_1 = sum(combined_values_intelligence == 1) / sum(data$attribute_intelligence_1 == 1 | data$attribute_intelligence_2 == 1),
intelligence_2 = sum(combined_values_intelligence == 2) / sum(data$attribute_intelligence_1 == 2 | data$attribute_intelligence_2 == 2),
intelligence_3 = sum(combined_values_intelligence == 3) / sum(data$attribute_intelligence_1 == 3 | data$attribute_intelligence_2 == 3),
intelligence_4 = sum(combined_values_intelligence == 4) / sum(data$attribute_intelligence_1 == 4 | data$attribute_intelligence_2 == 4),
intelligence_5 = 0
)
frequenze_relative_globali_intelligence <- frequenze_relative_globali_intelligence[0 : 4]
# barplot Ranked: WinRate per i valori di Intelligence
bp_intelligence <- barplot(
frequenze_relative_globali_intelligence,
col = "lightgreen",
border = "black",
main = "Ranked: WinRate per i valori di Intelligence",
xlab = "Valori attributo Intelligence",
ylab = "Frequenza relativa",
names.arg = c("0", "1", "2", "3"),
ylim = c(0, max(frequenze_relative_globali_intelligence) + 0.1)
)
# valori delle frequenze relative sopra le barre
text(bp_intelligence,
y = frequenze_relative_globali_intelligence + 0.04,
labels = round(frequenze_relative_globali_intelligence, 3),
col = "black",
cex = 1)
print(frequenze_relative_globali_intelligence)
# filtro i valori per attribute_agility_1 quando win == 1
filtered_agility_1 <- data$attribute_agility_1[data$win == 1]
# filtro i valori per attribute_agility_2 quando win == -1
filtered_agility_2 <- data$attribute_agility_2[data$win == -1]
# unione dei valori filtrati in un unico vettore
combined_values_agility <- c(filtered_agility_1, filtered_agility_2)
# calcolo delle frequenze assolute totali per agility
frequenze_totali_agility <- table(combined_values_agility)
# calcolo delle frequenze relative globali per ogni valore di "agility"
frequenze_relative_globali_agility <- c(
agility_0 = sum(combined_values_agility == 0) / sum(data$attribute_agility_1 == 0 | data$attribute_agility_2 == 0),
agility_1 = sum(combined_values_agility == 1) / sum(data$attribute_agility_1 == 1 | data$attribute_agility_2 == 1),
agility_2 = sum(combined_values_agility == 2) / sum(data$attribute_agility_1 == 2 | data$attribute_agility_2 == 2),
agility_3 = sum(combined_values_agility == 3) / sum(data$attribute_agility_1 == 3 | data$attribute_agility_2 == 3),
agility_4 = sum(combined_values_agility == 4) / sum(data$attribute_agility_1 == 4 | data$attribute_agility_2 == 4),
agility_5 = sum(combined_values_agility == 5) / sum(data$attribute_agility_1 == 5 | data$attribute_agility_2 == 5)
)
frequenze_relative_globali_agility <- frequenze_relative_globali_agility[0 : 4]
# barplot Ranked: WinRate per i valori di Agility
bp_agility <- barplot(
frequenze_relative_globali_agility,
col = "lightcoral",
border = "black",
main = "Ranked: WinRate per i valori di Agility",
xlab = "Valori attributo Agility",
ylab = "Frequenza relativa",
names.arg = c("0", "1", "2", "3"),
ylim = c(0, max(frequenze_relative_globali_agility) + 0.1)
)
# valori delle frequenze relative sopra le barre
text(bp_agility,
y = frequenze_relative_globali_agility + 0.04,
labels = round(frequenze_relative_globali_agility, 3),
col = "black",
cex = 1)
print(frequenze_relative_globali_agility)
# filtro i valori per attribute_universal_1 quando win == 1
filtered_universal_1 <- data$attribute_universal_1[data$win == 1]
# filtro i valori per attribute_universal_2 quando win == -1
filtered_universal_2 <- data$attribute_universal_2[data$win == -1]
# unione dei valori filtrati in un unico vettore
combined_values_universal <- c(filtered_universal_1, filtered_universal_2)
# calcolo delle frequenze assolute totali per universal
frequenze_totali_universal <- table(combined_values_universal)
frequenze_totali_universal
# calcolo delle frequenze relative globali per ogni valore di "universal"
frequenze_relative_globali_universal <- c(
universal_0 = sum(combined_values_universal == 0) / sum(data$attribute_universal_1 == 0 | data$attribute_universal_2 == 0),
universal_1 = sum(combined_values_universal == 1) / sum(data$attribute_universal_1 == 1 | data$attribute_universal_2 == 1),
universal_2 = sum(combined_values_universal == 2) / sum(data$attribute_universal_1 == 2 | data$attribute_universal_2 == 2),
universal_3 = sum(combined_values_universal == 3) / sum(data$attribute_universal_1 == 3 | data$attribute_universal_2 == 3),
universal_4 = sum(combined_values_universal == 4) / sum(data$attribute_universal_1 == 4 | data$attribute_universal_2 == 4),
universal_5 = 0
)
frequenze_relative_globali_universal <- frequenze_relative_globali_universal[0 : 4]
# barplot Ranked: WinRate per i valori di Universal
bp_universal <- barplot(
frequenze_relative_globali_universal,
col = "lightseagreen",
border = "black",
main = "Ranked: WinRate per i valori di Universal",
xlab = "Valori attributo Universal",
ylab = "Frequenza relativa",
names.arg = c("0", "1", "2", "3"),
ylim = c(0, max(frequenze_relative_globali_universal) + 0.1)
)
# valori delle frequenze relative sopra le barre
text(bp_universal,
y = frequenze_relative_globali_universal + 0.04,
labels = round(frequenze_relative_globali_universal, 3),
col = "black",
cex = 1)
# Selezione del dataset
# my_data <- read.table("dataset_dota2_augumented.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
my_data <- read.table("dataset_dota2_augumented_sintetico.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
# Trasformazione delle colonne stringe in int
columInt = paste0("hero", 22:113)
for (name in columInt) {
my_data[,name] = as.integer(as.numeric(my_data[,name]))
}
my_data$win = as.integer(as.numeric(my_data$win))
# Stampa frequenze gamemode
freq <- table(my_data$gamemode)
print(freq)
coord = barplot(
freq,
names.arg = c("1","2","3","4","5","6","7","8","9"),
col = c("black", "skyblue" ,"darkblue", "darkgreen", "blue", "lightgreen", "yellow", "orange", "white"),
border = "black",
xlab = "GameMode",
ylab = "Frequenze",
main = "Frequenze delle GameMode",
cex.names = 1,
cex.axis = 1,
ylim= c(0,6500),
las = 1
)
text(
x = coord,
y = freq,
labels = freq,
pos = 3,
cex = 1.2,
col = "black"
)
# barplot frequenze gametype
freq <- table(my_data$gametype)
print(freq)
coord = barplot(
freq,
names.arg = c("1","2","3"),
col = c("black","skyblue", "lightgreen"),
border = "black",
xlab = "GameType",
ylab = "Frequenze",
main = "Frequenze delle GameType",
cex.names = 1,
cex.axis = 1,
ylim= c(0,5500),
las = 1
)
text(
x = coord,
y = freq,
labels = freq,
pos = 3,
cex = 1.2,
col = "black"
)
freq <- table(my_data$gametype)
print(freq)
# Barplot frequenze gametype
coord2 = barplot(freq,
main = "Frequenze GameType",
col = 1:3,
border = "black",
ylim = c(0, max(freq) + 500),
xlab = "GameType",
ylab = "Frequenze",
cex.main = 1.5,
cex.lab = 1.2,
names.arg = c("Ranked", "Unranked"),
cex.names = 1.1)
text(
x = coord2,
y = freq,
labels = freq,
pos = 3,
cex = 1.2,
col = "black"
)
# stampa frequenze gamemode e gametype
freq <- table(my_data$gametype,my_data$gamemode)
print(freq)
barplot(freq, ylab="Frequenze", names.arg = "5 vs 5" , xlab="GameMode", main="Frequenze coppie GameMode GameType", col= 1:3)
# aggiunta della legend
legend(
"topright",
legend = c ("Ranked","Unranked"),
col = 1:3,
pch = 15,
title = "GameType"
)
# valori null
any_na <- any(is.na(my_data))
print(any_na)
# frequenze di pick degli Hero con gamemode=2 e gametype=2|3
my_data2 = filter(my_data, gamemode==2 & (gametype==2 | gametype==3))
hero_columns <- my_data2[, paste0("hero", 1:113)]
# Funzione per contare 1 e -1 separatamente e incrementare un contatore di 1
# Numero di volte che ogni campione Ã¨ stato selezionato
count_values <- apply(hero_columns, 2, function(col) {
sum(col == 1) + sum(col == -1)
})
count_values
# Barplot Pick Hero
barplot(count_values,
main = "Pick Hero",  # Titolo
col = "skyblue",
border = "black",
ylim = c(0, max(count_values) + 10),
xlab = "Hero",
ylab = "Frequenze",
names.arg = names(count_values),
cex.names = 0.7,
las = 2,
cex.main = 1.5,
cex.lab = 1.2,
cex.axis = 1)
# Grafico combinato 2 colonne 1 riga
par(mfrow=c(2,1))
# Frequenze relative di pick degli Hero con gamemode=2 e gametype=2
my_data3 = filter(my_data, gamemode==2 & gametype==2)
hero_columns <- my_data3[, paste0("hero", 1:113)]
# Funzione per contare 1 e -1 separatamente e incrementare un contatore di 1
count_values3 <- apply(hero_columns, 2, function(col) {
sum(col == 1) + sum(col == -1)
})
setwd("ProgettiR\\ProggettoStatistica")
#data <- read.table("dataset_dota2_augumented.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
data <- read.table("dataset_dota2_augumented_sintetico.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
# trasformo la colonna in numeric
data$elo_game <- as.numeric(data$elo_game)
colnames(data)
data <- data[data$gamemode == 2 & data$gametype == 2, ]
# variabile aleatoriadell'elo
elo_game <- data$elo_game
# Istogramma ELO Ranked/Unranked
hist(elo_game,
col = "lightblue",
border = "white",
main = "Distribuzione ELO Ranked",
xlab = "ELO",
ylab = "Frequenza",
ylim = c(0, 500),
las = 1,
freq = TRUE)
getwd()
setwd("ProgettiR\\ProggettoStatistica")
# data <- read.table("dataset_dota2_augumented.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
data <- read.table("dataset_dota2_augumented_sintetico.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
data <- data[data$gametype == 2, ]
# calcolo del numero totale di istanze per ogni attributo
totale_istanze <- nrow(data)*2
# calcolo delle frequenze relative per ogni attributo
frequenze_relative <- c(
strength = (sum(data$attribute_strength_1 > 0) + sum(data$attribute_strength_2 > 0)) / totale_istanze,
intelligence = (sum(data$attribute_intelligence_1 > 0) + sum(data$attribute_intelligence_2 > 0)) / totale_istanze,
agility = (sum(data$attribute_agility_1 > 0) + sum(data$attribute_agility_2 > 0)) / totale_istanze,
universal = (sum(data$attribute_universal_1 > 0) + sum(data$attribute_universal_2 > 0)) / totale_istanze
)
frequenze_relative
# barplot Ranked: PickRate degli attributi
bp <- barplot(
frequenze_relative,
col = c("skyblue", "lightgreen", "lightcoral", "lightseagreen"),
border = "black",
main = "Ranked: PickRate degli attributi ",
xlab = "Attributi",
ylab = "Frequenza relativa",
ylim = c(0, max(frequenze_relative) + 0.1)
)
# percentuali sopra le barre
text(bp,
y = frequenze_relative + 0.05,
labels = paste0(round(frequenze_relative * 100, 1), "%"),
col = "black",
cex = 1)
print(frequenze_relative)
frequenze = frequenze_relative*nrow(data)*2
frequenze
# nomi attributi
nomi_attributi <- c("Strength", "Intelligence", "Agility", "Universal")
# calcolo delle frequenze relative globali
frequenze_relative_globali <- c(
strength = (sum(data$attribute_strength_1[data$win == 1] > 0) +
sum(data$attribute_strength_2[data$win == -1] > 0)) / frequenze["strength"],
intelligence = (sum(data$attribute_intelligence_1[data$win == 1] > 0) +
sum(data$attribute_intelligence_2[data$win == -1] > 0)) / frequenze["intelligence"],
agility = (sum(data$attribute_agility_1[data$win == 1] > 0) +
sum(data$attribute_agility_2[data$win == -1] > 0)) / frequenze["agility"],
universal = (sum(data$attribute_universal_1[data$win == 1] > 0) +
sum(data$attribute_universal_2[data$win == -1] > 0)) / frequenze["universal"]
)
# barplot Ranked: PickRate degli attributi
bp <- barplot(
frequenze_relative,
col = c("skyblue", "lightgreen", "lightcoral", "lightseagreen"),
border = "black",
main = "Ranked: PickRate degli attributi ",
xlab = "Attributi",
ylab = "Frequenza relativa",
ylim = c(0, max(frequenze_relative) + 0.1)
)
# percentuali sopra le barre
text(bp,
y = frequenze_relative + 0.05,
labels = paste0(round(frequenze_relative * 100, 1), "%"),
col = "black",
cex = 1)
print(frequenze_relative)
frequenze = frequenze_relative*nrow(data)*2
frequenze
# nomi attributi
nomi_attributi <- c("Strength", "Intelligence", "Agility", "Universal")
# selezione del dataset
# my_data <- read.table("dota2_2.csv", header = TRUE, sep = ";", na.strings = "NA", dec = ",")
my_data <- read.table("sitetic_dataset_dota2_2.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
getwd()
setwd("ProgettiR\\ProggettoStatistica")
# selezione del dataset
#my_data <- read.table("dataset_dota2_augumented.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
my_data <- read.table("dataset_dota2_augumented_sintetico.csv", header = TRUE, sep = ",", na.strings = "NA", dec = ",")
# trasformazione delle colonne stringe in int
columInt = paste0("hero", 22:113)
for (name in columInt) {
my_data[,name] = as.integer(as.numeric(my_data[,name]))
}
my_data$win = as.integer(as.numeric(my_data$win))
hero_column_names <- paste0("hero", 1:113)
win_column_name <- "win"
# Win degli Hero
compute_hero_win_abs <- function(data, hero_columns, win_column) {
results <- numeric(length(hero_columns))
win_col_value= data$win
# Loop su ogni colonna hero
for (i in seq_along(hero_columns)) {
hero_col <- hero_columns[i]
# Conto le righe dove il valore di hero Ã¨ uguale al valore di win
hero_col_val = data[,hero_col]
for(j in seq_along(hero_col_val)){
if(hero_col_val[j] == win_col_value[j]){
results[i] = results[i]+1;
}
}
}
names(results) <- hero_columns
return(results)
}
# Dataset contenente solo le istanze valutate
dataset_cleaned = filter(my_data, gamemode==2 & (gametype==2 | gametype==3))
hero_values <- dataset_cleaned[, paste0("hero", 1:113)]
# Funzione per contare 1 e -1 separatamente e incrementare un contatore di 1
# Numero di volte che ogni campione Ã¨ stato selezionato
hero_pick_abs <- apply(hero_values, 2, function(col) {
sum(col == 1) + sum(col == -1)
})
# Calcolo il WinRate
winrate <- compute_hero_win_abs(dataset_cleaned, hero_column_names, win_column_name)
for(i in 1:113){
winrate[i]= winrate[i]/hero_pick_abs[i]
}
# Calcolo il PickRate
pickrate = c()
for(i in 1:113){
pickrate[i]= hero_pick_abs[i]/nrow(dataset_cleaned)
}
# Dataset contenente solo le istanze delle partite ranked
dataset_gametype2 = filter(my_data, gamemode==2 & gametype==2)
hero_values <- dataset_gametype2[, paste0("hero", 1:113)]
# Funzione per contare 1 e -1 separatamente e incrementare un contatore di 1
# Numero di volte che ogni campione Ã¨ stato selezionato
hero_pick_abs_gametype2 <- apply(hero_values, 2, function(col) {
sum(col == 1) + sum(col == -1)
})
# Calcolo il WinRate
winrate_gemetype2 <- compute_hero_win_abs(dataset_gametype2, hero_column_names, win_column_name)
for(i in 1:113){
winrate_gemetype2[i]= winrate_gemetype2[i]/hero_pick_abs_gametype2[i]
}
# Calcolo il PickRate
pickrate_gametype2 = c()
for(i in 1:113){
pickrate_gametype2[i]= hero_pick_abs_gametype2[i]/nrow(dataset_gametype2)
}
# Dataset contenente solo le istanze delle parite unranked
dataset_gametype3 = filter(my_data, gamemode==2 & gametype==3)
hero_values <- dataset_gametype3[, paste0("hero", 1:113)]
# Funzione per contare 1 e -1 separatamente e incrementare un contatore di 1
# Numero di volte che ogni campione Ã¨ stato selezionato
hero_pick_abs_gametype3 <- apply(hero_values, 2, function(col) {
sum(col == 1) + sum(col == -1)
})
# Calcolo il WinRate
winrate_gemetype3 <- compute_hero_win_abs(dataset_gametype3, hero_column_names, win_column_name)
for(i in 1:113){
winrate_gemetype3[i]= winrate_gemetype3[i]/hero_pick_abs_gametype3[i]
}
# Calcolo il PickRate
pickrate_gametype3 = c()
for(i in 1:113){
pickrate_gametype3[i]= hero_pick_abs_gametype3[i]/nrow(dataset_gametype3)
}
# plot Rapporto WinRate e PickRate Ranked
plot(winrate_gemetype2, pickrate_gametype2,
main = "Rapporto WinRate e PickRate Ranked",
xlab = "WinRate",
ylab = "PickRate",
col = "black",
pch = 1,
cex = 1.2,
cex.main = 1.5,
cex.lab = 1.2,
cex.axis = 1)
# linea orizzontale a y = 0.45
abline(v = 0.45, col = "blue", lwd = 2, lty = 2)
# linea verticale a x = 0.15
abline(h = 0.15 , col = "blue", lwd = 2, lty = 2)
grid(col = "gray", lty = "dotted")
# rapporto WinRate e PickRate Unranked
plot(winrate_gemetype3, pickrate_gametype3,
main = "Rapporto WinRate e PickRate Unranked",
xlab = "WinRate",
ylab = "PickRate",
col = "black",
pch = 1,
cex = 1.2,
cex.main = 1.5,
cex.lab = 1.2,
cex.axis = 1)
# inea orizzontale a y = 0.15
abline(h = 0.15, col = "blue", lwd = 2, lty = 2)
# linea verticale a x = 0.45
abline(v = 0.45 , col = "blue", lwd = 2, lty = 2)
grid(col = "gray", lty = "dotted")
# creazione del dataframe con colonne PickRate e WinRate
df_cor = data.frame(
PickRate = pickrate,
WinRate = winrate
)
cor(df_cor, use = "complete.obs")
corrplot.mixed(cor(df_cor, use = "complete.obs"),upper ="circle", lower = "number")
spline_winrate_pickrate <- lm(winrate ~ bs(pickrate, knots=seq(0.0, 0.15, length.out=10)))
preds <- predict(spline_winrate_pickrate, newdata=list(x=pickrate))
# Plot Rapporto WinRate e PickRate
plot(winrate,pickrate, xlab = "WinRate", ylab = "PickRate", main="Spline")
# aggiungo il valore di ARS in basso a destra, leggermente all'interno del riquadro
text(x = par("usr")[2] - 0.17 * (par("usr")[2] - par("usr")[1]),
y = par("usr")[3] + 0.05 * (par("usr")[4] - par("usr")[3]),
labels = "RS: 0.2411",
pos = 4,
cex = 1,
col = "blue",
xpd = TRUE)
punti <- data.frame(pickrate = pickrate, preds = preds)
# ordino il data frame in base a pickrate
punti_ordinati <- punti[order(punti$pickrate), ]
lines(punti_ordinati, col="blue")
summary(spline_winrate_pickrate)
# Eliminazioni valore NaN
winrate = winrate[-24]
winrate = winrate[-107]
pickrate = pickrate[-24]
pickrate = pickrate[-107]
# costruzione del modello di regressione gaussiana
gausmodel_winrate_pickrate <- gausspr(x = pickrate, y = winrate, kernel = "rbfdot")
# previsione sui dati di input
predictions <- predict(gausmodel_winrate_pickrate, pickrate)
# visualizzazione dei dati e della predizione
plot(winrate, pickrate, main = "Gaussian Process Regression",
xlab = "WinRate",ylab = "PickRate")
# aggiungo il valore di ARS in basso a destra, leggermente all'interno del riquadro
text(x = par("usr")[2] - 0.17 * (par("usr")[2] - par("usr")[1]),
y = par("usr")[3] + 0.05 * (par("usr")[4] - par("usr")[3]),
labels = "RS: 0.3189",
pos = 4,
cex = 1,
col = "blue",
xpd = TRUE)
punti <- data.frame(pickrate = pickrate, preds = predictions)
# ordino il data frame in base a pickrate
punti_ordinati <- punti[order(punti$pickrate), ]
lines(punti_ordinati, col ="blue")
# calcolo la somma dei quadrati totali (TSS)
tss <- sum((winrate - mean(winrate))^2)
# calcolo la somma dei quadrati residui (RSS)
rss <- sum((winrate - predictions)^2)
getwd()
setwd("ProgettiR\\ProggettoStatistica")
# nome del file contenente le istanze generate da chat-gpt
file_path <- "istanze_dataset_sintetico.txt"
# lettura del file
righe <- readLines(file_path)
# stampa le righe
print(righe)
predictions <- scan("predizioni_win.txt", what = numeric())
table(my_data$win)
